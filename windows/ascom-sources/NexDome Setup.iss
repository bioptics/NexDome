;
; Script generated by the ASCOM Driver Installer Script Generator 6.2.0.0
; Generated by Gerry Rozema on 13/06/2016 (UTC)
;
#define MyAppId="fb8b4b23-c180-426b-a61a-1fd458544c9e"
#define MyAppName "ASCOM NexDome Dome Driver"
#define MyAppVersion "1.1.3"

[Setup]
AppID={{{#MyAppId}}
AppName={#MyAppName}
AppVerName={#MyAppName} {#MyAppVersion}
AppVersion={#MyAppVersion}
AppPublisher="Gerry Rozema <gerryr@rozeware.com>"
AppPublisherURL="mailto:gerryr@rozeware.com"
AppSupportURL="http://tech.groups.yahoo.com/group/ASCOM-Talk/"
AppUpdatesURL="http://ascom-standards.org/"
VersionInfoVersion={#MyAppVersion}
MinVersion=0,5.0.2195sp4
DefaultDirName="{cf}\ASCOM\Dome"
DisableDirPage=yes
DisableProgramGroupPage=yes
OutputDir="."
OutputBaseFilename="NexDome-Setup-{#MyAppVersion}"
Compression=lzma
SolidCompression=yes
; Put there by Platform if Driver Installer Support selected
WizardImageFile="C:\Program Files (x86)\ASCOM\Platform 6 Developer Components\Installer Generator\Resources\WizardImage.bmp"
LicenseFile=".\..\..\LICENSE"
; {cf}\ASCOM\Uninstall\Dome folder created by Platform, always
UninstallFilesDir="{cf}\ASCOM\Uninstall\Dome\NexDome"

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Dirs]
Name: "{cf}\ASCOM\Uninstall\Dome\NexDome"
; TODO: Add subfolders below {app} as needed (e.g. Name: "{app}\MyFolder")

;  Add an option to install the source files
[Tasks]
Name: source; Description: Install the Source files; Flags: unchecked

[Files]
Source: ".\bin\x86\Release\ASCOM.NexDome.Dome.dll"; DestDir: "{app}"
; Require a read-me HTML to appear after installation, maybe driver's Help doc
Source: ".\..\..\README.txt"; DestDir: "{app}"; Flags: isreadme
; Optional source files (COM and .NET aware)
Source: ".\*"; Excludes: *.zip,*.exe,*.dll, \bin\*, \obj\*; DestDir: "{app}\Source\NexDome Driver"; Tasks: source; Flags: recursesubdirs
; TODO: Add other files needed by your driver here (add subfolders above)


; Only if driver is .NET
[Run]
; Only for .NET assembly/in-proc drivers
Filename: "{dotnet4032}\regasm.exe"; Parameters: "/codebase ""{app}\ASCOM.NexDome.Dome.dll"""; Flags: runhidden 32bit
Filename: "{dotnet4064}\regasm.exe"; Parameters: "/codebase ""{app}\ASCOM.NexDome.Dome.dll"""; Flags: runhidden 64bit; Check: IsWin64




; Only if driver is .NET
[UninstallRun]
; Only for .NET assembly/in-proc drivers
Filename: "{dotnet4032}\regasm.exe"; Parameters: "-u ""{app}\ASCOM.NexDome.Dome.dll"""; Flags: runhidden 32bit
; This helps to give a clean uninstall
Filename: "{dotnet4064}\regasm.exe"; Parameters: "/codebase ""{app}\ASCOM.NexDome.Dome.dll"""; Flags: runhidden 64bit; Check: IsWin64
Filename: "{dotnet4064}\regasm.exe"; Parameters: "-u ""{app}\ASCOM.NexDome.Dome.dll"""; Flags: runhidden 64bit; Check: IsWin64



[CODE]
//
// Before the installer UI appears, verify that the (prerequisite)
// ASCOM Platform 6.2 or greater is installed, including both Helper
// components. Utility is required for all types (COM and .NET)!
//
function InitializeSetup(): Boolean;
var
   U : Variant;
   H : Variant;
begin
   Result := FALSE;  // Assume failure
   
   try
      U := CreateOLEObject('ASCOM.Utilities.Util');
   except
      MsgBox('The ASCOM Utilities object has failed to load, this indicates that the ASCOM Platform has not been installed correctly', mbInformation, MB_OK);
   end;
   try
      if (U.IsMinimumRequiredVersion(6,2)) then	// this will work in all locales
         Result := TRUE;
   except
   end;
   if(not Result) then
      MsgBox('The ASCOM Platform 6.2 or greater is required for this driver.', mbInformation, MB_OK);
end;

// Code to enable the installer to uninstall previous versions of itself when a new version is installed
procedure CurStepChanged(CurStep: TSetupStep);
var
  ResultCode: Integer;
  UninstallExists: Boolean;
  UninstallExe: String;
begin
  if (CurStep = ssInstall) then // Install step has started
	begin

      // Check if the UninstallString registy exists 
      UninstallExists := RegQueryStringValue(HKLM, 'SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\{{#MyAppId}}_is1', 'UninstallString', uninstallExe);

      if UninstallExists then
      begin // Entry exists and previous version is installed so run its uninstaller quietly after informing the user
        MsgBox('Setup will now remove the previous version', mbInformation, MB_OK);
        Exec(RemoveQuotes(UninstallExe), ' /SILENT', '', SW_SHOWNORMAL, ewWaitUntilTerminated, ResultCode);
        sleep(2000);    //Give enough time for the install screen to be repainted before continuing
      end;
  end;
end;

